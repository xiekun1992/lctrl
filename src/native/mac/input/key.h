#pragma once
#include "./scancode.h"

static const int keys[] = {
    // [KEY_RESERVED] = SCANCODE_RESERVED,
    [kVK_Escape] = SCANCODE_ESC,
    [kVK_ANSI_1] = SCANCODE_1,
    [kVK_ANSI_2] = SCANCODE_2,
    [kVK_ANSI_3] = SCANCODE_3,
    [kVK_ANSI_4] = SCANCODE_4,
    [kVK_ANSI_5] = SCANCODE_5,
    [kVK_ANSI_6] = SCANCODE_6,
    [kVK_ANSI_7] = SCANCODE_7,
    [kVK_ANSI_8] = SCANCODE_8,
    [kVK_ANSI_9] = SCANCODE_9,
    [kVK_ANSI_0] = SCANCODE_0,
    [kVK_ANSI_Minus] = SCANCODE_MINUS,
    [kVK_ANSI_Equal] = SCANCODE_EQUAL,
    [kVK_Delete] = SCANCODE_BACKSPACE,
    [kVK_Tab] = SCANCODE_TAB,
    [kVK_ANSI_Q] = SCANCODE_Q,
    [kVK_ANSI_W] = SCANCODE_W,
    [kVK_ANSI_E] = SCANCODE_E,
    [kVK_ANSI_R] = SCANCODE_R,
    [kVK_ANSI_T] = SCANCODE_T,
    [kVK_ANSI_Y] = SCANCODE_Y,
    [kVK_ANSI_U] = SCANCODE_U,
    [kVK_ANSI_I] = SCANCODE_I,
    [kVK_ANSI_O] = SCANCODE_O,
    [kVK_ANSI_P] = SCANCODE_P,
    [kVK_ANSI_LeftBracket] = SCANCODE_LEFTBRACE,
    [kVK_ANSI_RightBracket] = SCANCODE_RIGHTBRACE,
    [kVK_Return] = SCANCODE_ENTER,
    [kVK_Control] = SCANCODE_LEFTCTRL,
    [kVK_ANSI_A] = SCANCODE_A,
    [kVK_ANSI_S] = SCANCODE_S,
    [kVK_ANSI_D] = SCANCODE_D,
    [kVK_ANSI_F] = SCANCODE_F,
    [kVK_ANSI_G] = SCANCODE_G,
    [kVK_ANSI_H] = SCANCODE_H,
    [kVK_ANSI_J] = SCANCODE_J,
    [kVK_ANSI_K] = SCANCODE_K,
    [kVK_ANSI_L] = SCANCODE_L,
    [kVK_ANSI_Semicolon] = SCANCODE_SEMICOLON,
    [kVK_ANSI_Quote] = SCANCODE_APOSTROPHE,
    [kVK_ANSI_Grave] = SCANCODE_GRAVE,
    [kVK_Shift] = SCANCODE_LEFTSHIFT,
    [kVK_ANSI_Backslash] = SCANCODE_BACKSLASH,
    [kVK_ANSI_Z] = SCANCODE_Z,
    [kVK_ANSI_X] = SCANCODE_X,
    [kVK_ANSI_C] = SCANCODE_C,
    [kVK_ANSI_V] = SCANCODE_V,
    [kVK_ANSI_B] = SCANCODE_B,
    [kVK_ANSI_N] = SCANCODE_N,
    [kVK_ANSI_M] = SCANCODE_M,
    [kVK_ANSI_Comma] = SCANCODE_COMMA,
    [kVK_ANSI_Period] = SCANCODE_DOT,
    [kVK_ANSI_Slash] = SCANCODE_SLASH,
    [kVK_RightShift] = SCANCODE_RIGHTSHIFT,
    [kVK_Option] = SCANCODE_LEFTALT,
    [kVK_Space] = SCANCODE_SPACE,
    [kVK_CapsLock] = SCANCODE_CAPSLOCK,
    [kVK_F1] = SCANCODE_F1,
    [kVK_F2] = SCANCODE_F2,
    [kVK_F3] = SCANCODE_F3,
    [kVK_F4] = SCANCODE_F4,
    [kVK_F5] = SCANCODE_F5,
    [kVK_F6] = SCANCODE_F6,
    [kVK_F7] = SCANCODE_F7,
    [kVK_F8] = SCANCODE_F8,
    [kVK_F9] = SCANCODE_F9,
    [kVK_F10] = SCANCODE_F10,
    // [KEY_NUMLOCK] = SCANCODE_NUMLOCK,
    // [KEY_SCROLLLOCK] = SCANCODE_SCROLLLOCK,
    [kVK_ANSI_KeypadMultiply] = SCANCODE_KPASTERISK,
    [kVK_ANSI_Keypad7] = SCANCODE_KP7,
    [kVK_ANSI_Keypad8] = SCANCODE_KP8,
    [kVK_ANSI_Keypad9] = SCANCODE_KP9,
    [kVK_ANSI_KeypadMinus] = SCANCODE_KPMINUS,
    [kVK_ANSI_Keypad4] = SCANCODE_KP4,
    [kVK_ANSI_Keypad5] = SCANCODE_KP5,
    [kVK_ANSI_Keypad6] = SCANCODE_KP6,
    [kVK_ANSI_KeypadPlus] = SCANCODE_KPPLUS,
    [kVK_ANSI_Keypad1] = SCANCODE_KP1,
    [kVK_ANSI_Keypad2] = SCANCODE_KP2,
    [kVK_ANSI_Keypad3] = SCANCODE_KP3,
    [kVK_ANSI_Keypad0] = SCANCODE_KP0,
    [kVK_ANSI_KeypadDecimal] = SCANCODE_KPDOT,

    // KEY_ZENKAKUHANKAKU,
    // KEY_102ND,
    [kVK_F11] = SCANCODE_F11,
    [kVK_F12] = SCANCODE_F12,
    // KEY_RO,
    // KEY_KATAKANA,
    // KEY_HIRAGANA,
    // KEY_HENKAN,
    // KEY_KATAKANAHIRAGANA,
    // KEY_MUHENKAN,
    // KEY_KPJPCOMMA,
    [kVK_ANSI_KeypadEnter] = SCANCODE_KPENTER,
    [kVK_RightControl] = SCANCODE_RIGHTCTRL,
    [kVK_ANSI_KeypadDivide] = SCANCODE_KPSLASH,
    // [KEY_SYSRQ] = SCANCODE_SYSRQ,
    [kVK_RightOption] = SCANCODE_RIGHTALT,
    // KEY_LINEFEED,
    [kVK_Home] = SCANCODE_HOME,
    [kVK_UpArrow] = SCANCODE_UP,
    [kVK_PageUp] = SCANCODE_PAGEUP,
    [kVK_LeftArrow] = SCANCODE_LEFT,
    [kVK_RightArrow] = SCANCODE_RIGHT,
    [kVK_End] = SCANCODE_END,
    [kVK_DownArrow] = SCANCODE_DOWN,
    [kVK_PageDown] = SCANCODE_PAGEDOWN,
    // [KEY_INSERT] = SCANCODE_INSERT,
    [kVK_ForwardDelete] = SCANCODE_DELETE,
    // KEY_MACRO,
    // KEY_MUTE,
    // KEY_VOLUMEDOWN,
    // KEY_VOLUMEUP,
    // KEY_POWER,
    // KEY_KPEQUAL,
    // KEY_KPPLUSMINUS,
    // [KEY_PAUSE] = SCANCODE_PAUSE,
    [kVK_Command] = SCANCODE_LEFTMETA,
    [kVK_RightCommand] = SCANCODE_RIGHTMETA,
    // [KEY_MENU] = SCANCODE_MENU,
};

static const int sc_to_key[] = {
    // [SCANCODE_RESERVED] = KEY_RESERVED,
    [SCANCODE_ESC] = kVK_Escape,
    [SCANCODE_1] = kVK_ANSI_1,
    [SCANCODE_2] = kVK_ANSI_2,
    [SCANCODE_3] = kVK_ANSI_3,
    [SCANCODE_4] = kVK_ANSI_4,
    [SCANCODE_5] = kVK_ANSI_5,
    [SCANCODE_6] = kVK_ANSI_6,
    [SCANCODE_7] = kVK_ANSI_7,
    [SCANCODE_8] = kVK_ANSI_8,
    [SCANCODE_9] = kVK_ANSI_9,
    [SCANCODE_0] = kVK_ANSI_0,
    [SCANCODE_MINUS] = kVK_ANSI_Minus,
    [SCANCODE_EQUAL] = kVK_ANSI_Equal,
    [SCANCODE_BACKSPACE] = kVK_Delete,
    [SCANCODE_TAB] = kVK_Tab,
    [SCANCODE_Q] = kVK_ANSI_Q,
    [SCANCODE_W] = kVK_ANSI_W,
    [SCANCODE_E] = kVK_ANSI_E,
    [SCANCODE_R] = kVK_ANSI_R,
    [SCANCODE_T] = kVK_ANSI_T,
    [SCANCODE_Y] = kVK_ANSI_Y,
    [SCANCODE_U] = kVK_ANSI_U,
    [SCANCODE_I] = kVK_ANSI_I,
    [SCANCODE_O] = kVK_ANSI_O,
    [SCANCODE_P] = kVK_ANSI_P,
    [SCANCODE_LEFTBRACE] = kVK_ANSI_LeftBracket,
    [SCANCODE_RIGHTBRACE] = kVK_ANSI_RightBracket,
    [SCANCODE_ENTER] = kVK_Return,
    [SCANCODE_LEFTCTRL] = kVK_Control,
    [SCANCODE_A] = kVK_ANSI_A,
    [SCANCODE_S] = kVK_ANSI_S,
    [SCANCODE_D] = kVK_ANSI_D,
    [SCANCODE_F] = kVK_ANSI_F,
    [SCANCODE_G] = kVK_ANSI_G,
    [SCANCODE_H] = kVK_ANSI_H,
    [SCANCODE_J] = kVK_ANSI_J,
    [SCANCODE_K] = kVK_ANSI_K,
    [SCANCODE_L] = kVK_ANSI_L,
    [SCANCODE_SEMICOLON] = kVK_ANSI_Semicolon,
    [SCANCODE_APOSTROPHE] = kVK_ANSI_Quote,
    [SCANCODE_GRAVE] = kVK_ANSI_Grave,
    [SCANCODE_LEFTSHIFT] = kVK_Shift,
    [SCANCODE_BACKSLASH] = kVK_ANSI_Backslash,
    [SCANCODE_Z] = kVK_ANSI_Z,
    [SCANCODE_X] = kVK_ANSI_X,
    [SCANCODE_C] = kVK_ANSI_C,
    [SCANCODE_V] = kVK_ANSI_V,
    [SCANCODE_B] = kVK_ANSI_B,
    [SCANCODE_N] = kVK_ANSI_N,
    [SCANCODE_M] = kVK_ANSI_M,
    [SCANCODE_COMMA] = kVK_ANSI_Comma,
    [SCANCODE_DOT] = kVK_ANSI_Period,
    [SCANCODE_SLASH] = kVK_ANSI_Slash,
    [SCANCODE_RIGHTSHIFT] = kVK_RightShift,
    [SCANCODE_LEFTALT] = kVK_Option,
    [SCANCODE_SPACE] = kVK_Space,
    [SCANCODE_CAPSLOCK] = kVK_CapsLock,
    [SCANCODE_F1] = kVK_F1,
    [SCANCODE_F2] = kVK_F2,
    [SCANCODE_F3] = kVK_F3,
    [SCANCODE_F4] = kVK_F4,
    [SCANCODE_F5] = kVK_F5,
    [SCANCODE_F6] = kVK_F6,
    [SCANCODE_F7] = kVK_F7,
    [SCANCODE_F8] = kVK_F8,
    [SCANCODE_F9] = kVK_F9,
    [SCANCODE_F10] = kVK_F10,
    [SCANCODE_F11] = kVK_F11,
    [SCANCODE_F12] = kVK_F12,
    [SCANCODE_LEFTMETA] = kVK_Command,
    [SCANCODE_RIGHTMETA] = kVK_RightCommand,
    // [SCANCODE_MENU] = KEY_MENU,
    [SCANCODE_RIGHTCTRL] = kVK_RightControl,
    [SCANCODE_RIGHTALT] = kVK_RightOption,

    // [SCANCODE_SYSRQ] = KEY_SYSRQ,
    // [SCANCODE_SCROLLLOCK] = KEY_SCROLLLOCK,
    // [SCANCODE_PAUSE] = KEY_PAUSE,
    // [SCANCODE_INSERT] = KEY_INSERT,
    [SCANCODE_DELETE] = kVK_ForwardDelete,
    [SCANCODE_HOME] = kVK_Home,
    [SCANCODE_END] = kVK_End,
    [SCANCODE_PAGEUP] = kVK_PageUp,
    [SCANCODE_PAGEDOWN] = kVK_PageDown,
    [SCANCODE_UP] = kVK_UpArrow,
    [SCANCODE_LEFT] = kVK_LeftArrow,
    [SCANCODE_RIGHT] = kVK_RightArrow,
    [SCANCODE_DOWN] = kVK_DownArrow,

    // [SCANCODE_NUMLOCK] = KEY_NUMLOCK,
    [SCANCODE_KPASTERISK] = kVK_ANSI_KeypadMultiply,
    [SCANCODE_KP7] = kVK_ANSI_Keypad7,
    [SCANCODE_KP8] = kVK_ANSI_Keypad8,
    [SCANCODE_KP9] = kVK_ANSI_Keypad9,
    [SCANCODE_KPMINUS] = kVK_ANSI_KeypadMinus,
    [SCANCODE_KP4] = kVK_ANSI_Keypad4,
    [SCANCODE_KP5] = kVK_ANSI_Keypad5,
    [SCANCODE_KP6] = kVK_ANSI_Keypad6,
    [SCANCODE_KPPLUS] = kVK_ANSI_KeypadPlus,
    [SCANCODE_KP1] = kVK_ANSI_Keypad1,
    [SCANCODE_KP2] = kVK_ANSI_Keypad2,
    [SCANCODE_KP3] = kVK_ANSI_Keypad3,
    [SCANCODE_KP0] = kVK_ANSI_Keypad0,
    [SCANCODE_KPDOT] = kVK_ANSI_KeypadDecimal,
    [SCANCODE_KPSLASH] = kVK_ANSI_KeypadDivide,
    [SCANCODE_KPENTER] = kVK_ANSI_KeypadEnter};

int scancode_to_key(int scancode)
{
    if (sc_to_key[scancode] == 0)
    {
        if (scancode == SCANCODE_A)
        {
            return sc_to_key[scancode];
        }
        else
        {
            return -1;
        }
    }
    return sc_to_key[scancode];
}
